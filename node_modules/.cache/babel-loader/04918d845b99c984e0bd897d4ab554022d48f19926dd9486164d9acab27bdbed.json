{"ast":null,"code":"var _jsxFileName = \"/Users/yimdohyun/Desktop/\\u1106\\u116E\\u11AB\\u1109\\u1165/\\u1103\\u1162\\u1112\\u1161\\u11A8\\u1100\\u116D/01_\\u110C\\u1169\\u11AF\\u110B\\u1165\\u11B8\\u1111\\u1173\\u1105\\u1169\\u110C\\u1166\\u11A8\\u1110\\u1173/\\u1100\\u116A\\u11AB\\u1105\\u1175\\u110C\\u1161 \\u1111\\u1166\\u110B\\u1175\\u110C\\u1175/manager/src/pages/man/ManCallDetailsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport mockData from \"./mock_sample.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ManCallDetailsPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 전화의 ID를 가져옵니다.\n  const [callData, setCallData] = useState(null);\n\n  // 해당 ID에 해당하는 전화 데이터를 가져오는 함수\n  const fetchCallData = () => {\n    // mockData에서 해당 ID에 해당하는 전화를 찾습니다.\n    const foundCall = mockData.find(call => call.id === parseInt(id));\n    setCallData(foundCall);\n  };\n  useEffect(() => {\n    fetchCallData();\n  }, [id]); // id가 변경될 때마다 호출\n\n  // 데이터가 로드되지 않았을 경우\n  if (!callData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 전화 세부 정보를 표시합니다.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC804\\uD654 \\uC138\\uBD80 \\uC815\\uBCF4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC774\\uB984: \", callData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uB0A0\\uC9DC: \", callData.date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC2DC\\uAC04: \", callData.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uBD84\\uB958: \", callData.cluster]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD0A4\\uC6CC\\uB4DC: \", callData.keyword.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(ManCallDetailsPage, \"mxpRBMa8gaacGTEfIm3sw/EVEmk=\", false, function () {\n  return [useParams];\n});\n_c = ManCallDetailsPage;\nexport default ManCallDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"ManCallDetailsPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","mockData","jsxDEV","_jsxDEV","ManCallDetailsPage","_s","id","callData","setCallData","fetchCallData","foundCall","find","call","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","name","date","time","cluster","keyword","join","_c","$RefreshReg$"],"sources":["/Users/yimdohyun/Desktop/문서/대학교/01_졸업프로젝트/관리자 페이지/manager/src/pages/man/ManCallDetailsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport mockData from \"./mock_sample.json\";\n\nfunction ManCallDetailsPage() {\n  const { id } = useParams(); // URL에서 전화의 ID를 가져옵니다.\n  const [callData, setCallData] = useState(null);\n\n  // 해당 ID에 해당하는 전화 데이터를 가져오는 함수\n  const fetchCallData = () => {\n    // mockData에서 해당 ID에 해당하는 전화를 찾습니다.\n    const foundCall = mockData.find((call) => call.id === parseInt(id));\n    setCallData(foundCall);\n  };\n\n  useEffect(() => {\n    fetchCallData();\n  }, [id]); // id가 변경될 때마다 호출\n\n  // 데이터가 로드되지 않았을 경우\n  if (!callData) {\n    return <div>Loading...</div>;\n  }\n\n  // 전화 세부 정보를 표시합니다.\n  return (\n    <div>\n      <h1>전화 세부 정보</h1>\n      <p>이름: {callData.name}</p>\n      <p>날짜: {callData.date}</p>\n      <p>시간: {callData.time}</p>\n      <p>분류: {callData.cluster}</p>\n      <p>키워드: {callData.keyword.join(\", \")}</p>\n    </div>\n  );\n}\n\nexport default ManCallDetailsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,QAAQ,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAMU,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAMC,SAAS,GAAGT,QAAQ,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKO,QAAQ,CAACP,EAAE,CAAC,CAAC;IACnEE,WAAW,CAACE,SAAS,CAAC;EACxB,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdW,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,IAAI,CAACC,QAAQ,EAAE;IACb,oBAAOJ,OAAA;MAAAW,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,oBACEf,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBf,OAAA;MAAAW,QAAA,GAAG,gBAAI,EAACP,QAAQ,CAACY,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Bf,OAAA;MAAAW,QAAA,GAAG,gBAAI,EAACP,QAAQ,CAACa,IAAI;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Bf,OAAA;MAAAW,QAAA,GAAG,gBAAI,EAACP,QAAQ,CAACc,IAAI;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Bf,OAAA;MAAAW,QAAA,GAAG,gBAAI,EAACP,QAAQ,CAACe,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Bf,OAAA;MAAAW,QAAA,GAAG,sBAAK,EAACP,QAAQ,CAACgB,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV;AAACb,EAAA,CA/BQD,kBAAkB;EAAA,QACVJ,SAAS;AAAA;AAAAyB,EAAA,GADjBrB,kBAAkB;AAiC3B,eAAeA,kBAAkB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}