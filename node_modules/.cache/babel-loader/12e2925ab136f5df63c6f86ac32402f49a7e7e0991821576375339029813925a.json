{"ast":null,"code":"var _jsxFileName = \"/Users/yimdohyun/Desktop/\\u1106\\u116E\\u11AB\\u1109\\u1165/\\u1103\\u1162\\u1112\\u1161\\u11A8\\u1100\\u116D/01_\\u110C\\u1169\\u11AF\\u110B\\u1165\\u11B8\\u1111\\u1173\\u1105\\u1169\\u110C\\u1166\\u11A8\\u1110\\u1173/\\u1100\\u116A\\u11AB\\u1105\\u1175\\u110C\\u1161 \\u1111\\u1166\\u110B\\u1175\\u110C\\u1175/manager/src/pages/man/ManScriptPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport mockData from \"./mock_sample.json\";\nimport \"./ManScriptPage.css\"; // 스타일 파일을 import합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ManScriptPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 id를 가져옵니다.\n  const [originalData, setOriginalData] = useState(null);\n\n  // 해당 id에 해당하는 전화 데이터를 찾습니다.\n  useEffect(() => {\n    const callData = mockData.find(call => call.id === parseInt(id));\n    if (callData) {\n      // 원본 데이터를 설정합니다.\n      setOriginalData(callData.original);\n    }\n  }, [id]);\n  if (!originalData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC6D0\\uBCF8 \\uB370\\uC774\\uD130\\uB97C \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC6D0\\uBCF8 \\uB370\\uC774\\uD130\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-wrapper\",\n      children: originalData.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-wrapper ${message.spk === 0 ? \"spk-0\" : \"spk-1\"}`,\n        children: message.msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/manager/calllist/call/${id}`,\n      className: \"button\",\n      children: \"\\uB4A4\\uB85C\\uAC00\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(ManScriptPage, \"maCuSe911yLuw8Mdua0RgIiAIqU=\", false, function () {\n  return [useParams];\n});\n_c = ManScriptPage;\nexport default ManScriptPage;\nvar _c;\n$RefreshReg$(_c, \"ManScriptPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","mockData","jsxDEV","_jsxDEV","ManScriptPage","_s","id","originalData","setOriginalData","callData","find","call","parseInt","original","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","message","index","spk","msg","to","_c","$RefreshReg$"],"sources":["/Users/yimdohyun/Desktop/문서/대학교/01_졸업프로젝트/관리자 페이지/manager/src/pages/man/ManScriptPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport mockData from \"./mock_sample.json\";\nimport \"./ManScriptPage.css\"; // 스타일 파일을 import합니다.\n\nfunction ManScriptPage() {\n  const { id } = useParams(); // URL에서 id를 가져옵니다.\n  const [originalData, setOriginalData] = useState(null);\n\n  // 해당 id에 해당하는 전화 데이터를 찾습니다.\n  useEffect(() => {\n    const callData = mockData.find((call) => call.id === parseInt(id));\n    if (callData) {\n      // 원본 데이터를 설정합니다.\n      setOriginalData(callData.original);\n    }\n  }, [id]);\n\n  if (!originalData) {\n    return <div>원본 데이터를 찾을 수 없습니다.</div>;\n  }\n\n  return (\n    <div className=\"message-container\">\n      <h1>원본 데이터</h1>\n      {/* 원본 데이터를 출력합니다. */}\n      <div className=\"message-wrapper\">\n        {originalData.map((message, index) => (\n          <div\n            key={index}\n            className={`message-wrapper ${\n              message.spk === 0 ? \"spk-0\" : \"spk-1\"\n            }`}\n          >\n            {message.msg}\n          </div>\n        ))}\n      </div>\n      {/* 뒤로 가기 링크 */}\n      <Link to={`/manager/calllist/call/${id}`} className=\"button\">\n        뒤로가기\n      </Link>\n    </div>\n  );\n}\n\nexport default ManScriptPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAOC,QAAQ,MAAM,oBAAoB;AACzC,OAAO,qBAAqB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAGR,QAAQ,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKM,QAAQ,CAACN,EAAE,CAAC,CAAC;IAClE,IAAIG,QAAQ,EAAE;MACZ;MACAD,eAAe,CAACC,QAAQ,CAACI,QAAQ,CAAC;IACpC;EACF,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAI,CAACC,YAAY,EAAE;IACjB,oBAAOJ,OAAA;MAAAW,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,oBACEf,OAAA;IAAKgB,SAAS,EAAC,mBAAmB;IAAAL,QAAA,gBAChCX,OAAA;MAAAW,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEff,OAAA;MAAKgB,SAAS,EAAC,iBAAiB;MAAAL,QAAA,EAC7BP,YAAY,CAACa,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC/BnB,OAAA;QAEEgB,SAAS,EAAG,mBACVE,OAAO,CAACE,GAAG,KAAK,CAAC,GAAG,OAAO,GAAG,OAC/B,EAAE;QAAAT,QAAA,EAEFO,OAAO,CAACG;MAAG,GALPF,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENf,OAAA,CAACH,IAAI;MAACyB,EAAE,EAAG,0BAAyBnB,EAAG,EAAE;MAACa,SAAS,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAE7D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACb,EAAA,CAvCQD,aAAa;EAAA,QACLL,SAAS;AAAA;AAAA2B,EAAA,GADjBtB,aAAa;AAyCtB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}